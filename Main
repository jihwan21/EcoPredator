package TeamProject;

import java.util.*;

// 
//캐릭터 클래스
class Character {
	 private String name;
	 private int health;
	 private int mana;
	 private int attack;
	 private int defense;
	 private int experience;
	 private int currency;

	 public Character(String name, int health, int mana, int attack, int defense) {
	     this.name = name;
	     this.health = health;
	     this.mana = mana;
	     this.attack = attack;
	     this.defense = defense;
	     this.experience = 0;
	     this.currency = 0;
	 }
}

class Exploration {
	private List<String> areas; // 탐험 가능한 영역 리스트
	private List<String> stages; // 각 영역의 스테이지 리스트
	private Map<String, List<Monster>> stageMonsters; // 스테이지에 등장하는 몬스터 리스트

	public Exploration() {
		this.areas = Arrays.asList("지상", "수중", "공중");
		this.stages = Arrays.asList("1단계", "2단계", "3단계", "4단계", "5단계");
		this.stageMonsters = new HashMap<>();

     // 각 스테이지에 등장하는 몬스터 초기화
     initializeStageMonsters();
	}
	 private void initializeStageMonsters() {
		List<Monster> groundmonster = new ArrayList<>();
		// 몬스터 추가
		List<Monster> watermonster = new ArrayList<>();
		// 몬스터 추가
		List<Monster> airmonster = new ArrayList<>();
		// 몬스터 추가
	
	stageMonsters.put("지상", groundmonster);
	stageMonsters.put("수중", watermonster);
	stageMonsters.put("공중", airmonster);
	 }

	public void explore(Shop shop) {
		Scanner scanner = new Scanner(System.in);
		System.out.println("탐험할 영역을 선택하세요.");
		System.out.println("1. 지상");
		if (shop.hasSpecial("아가미")) {
			System.out.println("2. 수중");
		 }
		if (shop.hasSpecial("날개")) {
		    System.out.println("3. 공중");
		 }
		System.out.print("이동할 영역 선택: ");
		int areaChoice = scanner.nextInt();
	
		String selectedArea = "";
		switch (areaChoice) {
			case 1:
				selectedArea = "지상";
				break;
			case 2:
				if (shop.hasSpecial("아가미")) { // hasSpecial == 특수 장비 유무
					selectedArea = "수중";
				} 
				else {
					System.out.println("수중 영역 장비가 없음");
				}
				break;
			case 3:
				if (shop.hasSpecial("날개")) {
					selectedArea = "공중";
				} 
				else {
					System.out.println("공중 영역 장비 없음");
				}
				break;
				
			default:
				System.out.println("x");
		}
		// 선택 영역 스테이지 목록 표시
		List<Monster> stageMonsters = this.stageMonsters.get(selectedArea);
		if (stageMonsters != null) {
			System.out.println(selectedArea + " 탐험 영역의 스테이지 목록:");
			
			for (int i = 0; i < stages.size(); i++) {
				System.out.println((i + 1) + ". " + stages.get(i));
			}
	
			System.out.print("스테이지 선택: ");
			int stageChoice = scanner.nextInt();
	
			if (stageChoice >= 1 && stageChoice <= stages.size()) {
				// 선택한 스테이지 몬스터 리스트 가져오기
				List<Monster> monsters = stageMonsters.subList(0, stageChoice);
	
				// 전투 클래스 구현
	
				} 
			} 
	}
}

// 아이템
abstract class Item {
    private String name;
    private int price;

    public Item(String name, int price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public int getPrice() {
        return price;
    }
    
    public abstract void use();
}

// 배틀 아이템 클래스
class BattleItem extends Item {
    private String effect;

    public BattleItem(String name, int price, String effect) {
        super(name, price);
        this.effect = effect;
    }

    // 전투 클래스에 사용
    public void use() {
        System.out.println("사용한 효과: " + effect);
    }
}

// 일반 장비 클래스
class Equipment extends Item {
	// 능력치 추가해야댐
    private int durability;

    public Equipment(String name, int price, int durability) {
        super(name, price);
        this.durability = durability;
    }

    public void use() {
        System.out.println("장비를 착용했습니다.");
    }
}

// VIP 아이템 클래스
class VIPItem extends Item {
    private String specialAbility;

    public VIPItem(String name, int price, String specialAbility) {
        super(name, price);
        this.specialAbility = specialAbility;
    }
    
    // 사용 overriding
    public void use() {
        System.out.println("특별 능력을 발동했습니다: " + specialAbility);
    }
}

// 인벤토리 클래스
class Inventory {
    private List<Item> items;

    public Inventory() {
        items = new ArrayList<>();
    }

    // 인벤토리 추가
    public void addItem(Item item) {
        items.add(item);
        System.out.println(item.getName() + " 인벤토리에 추가했습니다.");
    }

    // 인벤토리에서 제거
    public void removeItem(Item item) {
        items.remove(item);
        System.out.println(item.getName() + " 인벤토리에서 제거했습니다.");
    }
    
    // 인벤토리 보기
    public void displayInventory() {
        if (items.isEmpty()) {
            System.out.println("인벤토리가 비어있습니다.");
        } else {
            System.out.println("인벤토리에 있는 아이템:");
            for (Item item : items) {
                System.out.println("- " + item.getName());
            }
        }
    }
    // 특수 장비 유무
    public boolean hasSpecial(String special) {
    	if (items.contains(special) ) {
    		return true;
    	}
    	else {
        	return false;    		
    	}
    }

}

// 상점 클래스
class Shop {
    private Inventory playerInventory;
    private List<Item> availableItems;

    public Shop() {
        playerInventory = new Inventory();
        availableItems = new ArrayList<>();

        // 상점에 판매할 아이템 추가
        availableItems.add(new BattleItem("HP 포션", 10, "체력 회복"));
        availableItems.add(new BattleItem("MP 포션", 15, "마나 회복"));
        availableItems.add(new BattleItem("상태이상 아이템", 20, "상태이상 저항"));
        availableItems.add(new Equipment("투구", 50, 100));
        availableItems.add(new Equipment("갑옷", 100, 200));
        availableItems.add(new Equipment("날개", 200, 150));
        availableItems.add(new Equipment("아가미", 250, 180));
        availableItems.add(new Equipment("어항", 300, 220));
        availableItems.add(new VIPItem("가호", 500, " 특수 능력 사용."));
    }

    public void showAvailableItems() {
        System.out.println("구매 가능한 품목");
        for (int i = 0; i < availableItems.size(); i++) {
        	Item item = availableItems.get(i);
            System.out.println((i + 1) + ". " + item.getName() + " - 가격: " + item.getPrice());
        }
    }

    // 아이템 구매
    public void purchaseItem(int itemIndex) {
        if (itemIndex >= 1 && itemIndex <= availableItems.size()) {
        	Item item = availableItems.get(itemIndex - 1);
            if (item.getPrice() <= getPlayerGold()) {
                playerInventory.addItem(item);
                reducePlayerGold(item.getPrice());
            } else {
                System.out.println("소지한 골드가 부족합니다.");
            }
        } else {
            System.out.println("유효한 품목을 선택해주세요.");
        }
    }

    private int getPlayerGold() {
    	// 플레이어의 재화 반환 코드
        return 300; // 예시
    }

    // 플레이어 골드 감소
    private void reducePlayerGold(int amount) {
        int currentGold = getPlayerGold();
        
        if (currentGold >= amount) {
            currentGold -= amount;
            System.out.println("플레이어의 골드가 " + amount + "만큼 감소했습니다.");
            System.out.println("현재 골드: " + currentGold);
        } else {
            System.out.println("플레이어의 골드가 부족합니다.");
        }
    }

    public Inventory getPlayerInventory() {
        return playerInventory;
    }
    
    public boolean hasSpecial(String special) {
    	return playerInventory.hasSpecial (special);
    }

}




// 몬스터 클래스
class Monster {
	 private String name;
	 private int health;
	 private int mana;
	 private int attack;
	 private int defense;
	 private int experience;
	 private int currency;

	 public Monster(String name, int health, int mana, int attack, int defense, 
			 		int experience, int currency) {
	     this.name = name;
	     this.health = health;
	     this.mana = mana;
	     this.attack = attack;
	     this.defense = defense;
	     this.experience = experience;
	     this.currency = currency;
	 }
}


public class kang {

	// 게임 메인 메소드
		 public static void main(String[] args) { // game start
		     Scanner in = new Scanner(System.in);
		     Random random = new Random();
		     Exploration exploration = new Exploration();
		     Shop shop = new Shop();
			 // 게임 초기화
		
		     // 캐릭터 생성 및 선택
			 
		     // 게임 메뉴 루프
		        while (true) {
	        	System.out.print("1. 탐험, 2. 상점, 3. 가방 4. 스탯, 5.강화, 6. 진화, 0. 게임 종료\n");
	        	System.out.print("선택 : ");

	            int choice = in.nextInt();

	            switch (choice) {
	                case 1:
	                	exploration.explore(shop);
	                	break;
	                	
	                case 2:
	                    shop.showAvailableItems();
	                    System.out.print("구매할 품목 번호를 입력하세요 (0: 뒤로가기): ");
	                    int itemChoice = in.nextInt();
	                    if (itemChoice == 0) {
	                        break;
	                    }
	                    shop.purchaseItem(itemChoice);
	                    break;

	                case 3:
	                    shop.getPlayerInventory().displayInventory();
	                    break;

	                case 4:
	                	break;
	                
	                case 5:
	                	break;
	                
	                case 6:
	                	break;
	                    
	                case 0:
	                    System.out.println("게임 종료");
	                    System.exit(0);
	                default:
	                    System.out.println("잘못 입력");
	                    break;
	            }
	        }
		 }
}

