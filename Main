package test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Scanner;

import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;

//플레이어 클래스
public class Player {// 공동으로 사용되는 것은 정적변수를 사용함
	static Monster p;
	static String name, style, tribe;
	static int hpPotionN, mpPotionN, 수류탄N, 일반장비N, 아가미N = 0, 어항N = 0, 날개N = 0, pMoney;

//위쪽에 있는 변수는 진화시에도 바뀌지 않는 변수, 아래쪽에 있는 변수는 진화시 바뀌는 변수

	static int level, power, defense, hp, hpMax, mp, mpMax, experience, money;// 레벨, 힘, 방어력, 체력/최대체력, 마나/최대마나
	static int upgradeS01, priceS01 = 20;// 1번스킬 업그레이드 수치와 가격

	void upgradeSkill(int select) {// 업그레이드 클래스를 따로 구현하지 않고 플레이어 클래스에서 메서드로 구현
		if (pMoney >= Player.priceS01 && select == 1)// {
			Player.upgrade01 += 10;// 지금은 그냥 더했지만 실수로 계산되게해서 1.1로 곱하는것도 좋을듯
		Player.money -= Player.priceS01;// '플레이어 돈'-'업그레이드 가격'
		Player.priceS01 += 10;// 1번스킬 '업그레이드 가격'증가
	}

	// 인벤토리
	private List<Item> items;

//	public Inventory() {
//		items = new ArrayList<>();
//	}

	// 인벤토리 추가
	public void addItem(Item item) {
		items.add(item);
		System.out.println(item.getName() + " 인벤토리에 추가했습니다.");
	}

	// 인벤토리에서 제거
	public void removeItem(Item item) {
		items.remove(item);
		System.out.println(item.getName() + " 인벤토리에서 제거했습니다.");
	}

	// 인벤토리 보기
	public void displayInventory() {
		if (items.isEmpty()) {
			System.out.println("인벤토리가 비어있습니다.");
		} else {
			System.out.println("인벤토리에 있는 아이템:");
			for (Item item : items) {
				System.out.println("- " + item.getName());
			}
		}
	}

//현재 플레이어 정보 시각화
	public class Status extends JFrame {
		JTable table;
		JScrollPane scroll; // 테이블 위에 열 라벨을 넣어주자~ scroll
		String[][] data; // 3명의 정보를 담을 2차원 배열을 생성한다.
		String[] title = { "  ", "  ", "  " }; // 제목

		public Status() {
			// 플레이어 클래스 필수 -> 플레이어 클래스로 객체 생성-> 사실상 필드멤버를 복사
			data = new String[8][3];
			data[0][0] = "칭호";
			data[0][1] = Player.style;

			data[1][0] = "이름";
			data[1][1] = Player.name;

			data[2][0] = "몬스터 이름";
			data[2][1] = Player.p.tribe;

			data[3][0] = "레벨";
			data[3][1] = Integer.toString(Player.level);

			data[4][0] = "현재HP/최대HP";
			data[4][1] = Integer.toString(Player.hp);
			data[4][2] = Integer.toString(Player.hpMax);

			data[5][0] = "현재MP/최대MP";
			data[5][1] = Integer.toString(Player.mp);
			data[5][2] = Integer.toString(Player.mpMax);

			data[6][0] = "돈";
			data[6][1] = Integer.toString(Player.pMoney);

			data[7][0] = "경험치";

			table = new JTable(data, title);
			scroll = new JScrollPane(table);
			add(scroll);

			this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			pack();
			setSize(400, 350);
			setVisible(true);
		}
	}

	class Exploration {
		private List<String> areas; // 탐험 가능한 영역 리스트
		private List<String> stages; // 각 영역의 스테이지 리스트
		private Map<String, List<Monster>> stageMonsters; // 스테이지에 등장하는 몬스터 리스트

		public Exploration() {
			this.areas = Arrays.asList("지상", "수중", "공중");
			this.stages = Arrays.asList("1단계", "2단계", "3단계", "4단계", "5단계");
			this.stageMonsters = new HashMap<>();

			// 각 스테이지에 등장하는 몬스터 초기화
			initializeStageMonsters();
		}

		private void initializeStageMonsters() {
			List<Monster> groundmonster = new ArrayList<>();
			// 몬스터 추가
			List<Monster> watermonster = new ArrayList<>();
			// 몬스터 추가
			List<Monster> airmonster = new ArrayList<>();
			// 몬스터 추가

			stageMonsters.put("지상", groundmonster);
			stageMonsters.put("수중", watermonster);
			stageMonsters.put("공중", airmonster);
		}

		public void explore(Shop shop) {
			Scanner scanner = new Scanner(System.in);
			System.out.println("탐험할 영역을 선택하세요.");
			System.out.println("1. 지상");
			if (shop.hasSpecial("아가미")) {
				System.out.println("2. 수중");
			}
			if (shop.hasSpecial("날개")) {
				System.out.println("3. 공중");
			}
			System.out.print("이동할 영역 선택: ");
			int areaChoice = scanner.nextInt();

			String selectedArea = "";
			switch (areaChoice) {
			case 1:
				selectedArea = "지상";
				break;
			case 2:
				if (shop.hasSpecial("아가미")) { // hasSpecial == 특수 장비 유무
					selectedArea = "수중";
				} else {
					System.out.println("수중 영역 장비가 없음");
				}
				break;
			case 3:
				if (shop.hasSpecial("날개")) {
					selectedArea = "공중";
				} else {
					System.out.println("공중 영역 장비 없음");
				}
				break;

			default:
				System.out.println("x");
			}
			// 선택 영역 스테이지 목록 표시
			List<Monster> stageMonsters = this.stageMonsters.get(selectedArea);
			if (stageMonsters != null) {
				System.out.println(selectedArea + " 탐험 영역의 스테이지 목록:");

				for (int i = 0; i < stages.size(); i++) {
					System.out.println((i + 1) + ". " + stages.get(i));
				}

				System.out.print("스테이지 선택: ");
				int stageChoice = scanner.nextInt();

				if (stageChoice >= 1 && stageChoice <= stages.size()) {
					// 선택한 스테이지 몬스터 리스트 가져오기
					List<Monster> monsters = stageMonsters.subList(0, stageChoice);

					// 전투 클래스 구현

				}
			}
		}
	}

// 아이템
	abstract class Item {
		private String name;
		private int price;

		public Item(String name, int price) {
			this.name = name;
			this.price = price;
		}

		public String getName() {
			return name;
		}

		public int getPrice() {
			return price;
		}
//
//	public abstract void use();
	}

// 배틀 아이템 클래스
	class BattleItem extends Item {
		private String effect; // 아이템 설명

		public BattleItem(String name, int price, String effect) {
			super(name, price);
			this.effect = effect;
		}

		// 전투 클래스에 사용
//	public void use() {
//		System.out.println("사용한 효과: " + effect);
//	}
	}

// 일반 장비 클래스 - 투구, 갑옷
	class Equipment extends Item {
		// 능력치 추가해야댐
		private int durability;

		public Equipment(String name, int price, int durability) {
			super(name, price);
			this.durability = durability;
		}

		public void use() {
			System.out.println("장비를 착용했습니다.");
		}
	}

// VIP 아이템 클래스 - 특수장비(아가미, 어항, 날개)
	class VIPItem extends Item {
		private String specialAbility; // 특수장비 설명

		public VIPItem(String name, int price, String specialAbility) {
			super(name, price);
			this.specialAbility = specialAbility;
		}

		// 사용 overriding
		public void use() {
			System.out.println("특별 능력을 발동했습니다: " + specialAbility);
		}
	}

//// 인벤토리 클래스
//	class Inventory {
//		private List<Item> items;
//
//		public Inventory() {
//			items = new ArrayList<>();
//		}
//
//		// 인벤토리 추가
//		public void addItem(Item item) {
//			items.add(item);
//			System.out.println(item.getName() + " 인벤토리에 추가했습니다.");
//		}
//
//		// 인벤토리에서 제거
//		public void removeItem(Item item) {
//			items.remove(item);
//			System.out.println(item.getName() + " 인벤토리에서 제거했습니다.");
//		}
//
//		// 인벤토리 보기
//		public void displayInventory() {
//			if (items.isEmpty()) {
//				System.out.println("인벤토리가 비어있습니다.");
//			} else {
//				System.out.println("인벤토리에 있는 아이템:");
//				for (Item item : items) {
//					System.out.println("- " + item.getName());
//				}
//			}
//		}
//
//		// 특수 장비 유무 - 문제!!!!
////	public boolean hasSpecial(String special) {
////		if (items.contains(special)) {
////			return true;
////		} else {
////			return false;
////		}
////	}
//	}

// 상점 클래스
	class Shop {
		private List<Item> availableItems;

		public Shop() {
			availableItems = new ArrayList<>();

			// 상점에 판매할 아이템 추가
			availableItems.add(new BattleItem("HP 포션", 10, "체력 회복"));
			availableItems.add(new BattleItem("MP 포션", 15, "마나 회복"));
			availableItems.add(new BattleItem("상태이상 아이템", 20, "상태이상 저항"));
			availableItems.add(new Equipment("투구", 50, 100));
			availableItems.add(new Equipment("갑옷", 100, 200));
			availableItems.add(new Equipment("날개", 200, 150));
			availableItems.add(new Equipment("아가미", 250, 180));
			availableItems.add(new Equipment("어항", 300, 220));
			availableItems.add(new VIPItem("가호", 500, " 특수 능력 사용."));
		}

		public void showAvailableItems() {
			System.out.println("구매 가능한 품목");
			for (int i = 0; i < availableItems.size(); i++) {
				Item item = availableItems.get(i);
				System.out.println((i + 1) + ". " + item.getName() + " - 가격: " + item.getPrice());
			}
		}

		// 아이템 구매
		public void purchaseItem(int itemIndex, Player player) {
			if (itemIndex >= 1 && itemIndex <= availableItems.size()) {
				Item item = availableItems.get(itemIndex - 1);
				if (item.getPrice() <= getPlayerGold()) {
					player.addItem(item);
					reducePlayerGold(item.getPrice());
				} else {
					System.out.println("소지한 골드가 부족합니다.");
				}
			} else {
				System.out.println("유효한 품목을 선택해주세요.");
			}
		}

		private int getPlayerGold() {
			// 플레이어의 재화 반환 코드
			return 300; // 예시
		}

		// 플레이어 골드 감소
		private void reducePlayerGold(int amount) {
			int currentGold = getPlayerGold();

			if (currentGold >= amount) {
				currentGold -= amount;
				System.out.println("플레이어의 골드가 " + amount + "만큼 감소했습니다.");
				System.out.println("현재 골드: " + currentGold);
			} else {
				System.out.println("플레이어의 골드가 부족합니다.");
			}
		}

//	public boolean hasSpecial(String special) {
//		return playerInventory.hasSpecial(special);
//	}

	}

	// 시간 클래스
	class Time {
		int time = 1;

		void count() {
			if (time == 12)
				time = 0;
			time += 1;
		}

		int current_time() {
			return time;
		}
	}

	// 몬스터 클래스
	class Monster extends Time {
		String name;
		int level;
		int Nocturnality; // 1 : 야행성, 0 : 주행성
		int hp;
		int hpMax;
		int mp;
		int mpMax;
		int power;
		int defense;
		int experience;
		int money;
		int upgradenum;

		public Monster(String name, int level, int Nocturnality, int hp, int hpMax, int mp, int mpMax, int power,
				int defense, int experience, int money) {
			this.name = name;
			this.Nocturnality = Nocturnality;
			this.hp = hp;
			this.hpMax = hpMax;
			this.mp = mp;
			this.mpMax = mpMax;
			this.power = power;
			this.defense = defense;
			this.experience = experience;
		}

		int current_power() { // 현재 time에 맞는 power return > 전투 공격력 산출 시 활용
			if (super.current_time() <= 6) { // time이 낮인 경우
				if (Nocturnality == 0) { // 낮이면서 주행성 동물
					power *= 1.1;
				} else if (Nocturnality == 1) { // 낮이면서 야행성 동물
					power *= 0.9;
				}
			} else if (super.current_time() > 6) { // time이 밤인 경우
				if (Nocturnality == 0) { // 밤이면서 주행성 동물
					power *= 0.9;
				} else if (Nocturnality == 1) { // 밤이면서 야행성 동물
					power *= 1.1;
				}
			}
			return power;
		}

	}

	// 업적 클래스
	class Achievement {
		String achievement_name; // 업적 대상 몬스터 이름
		int achivement_count = 0;

		public Achievement(Monster obj) { // monster 객체 call by reference
			this.achievement_name = obj.name;

		}

		void count() {
			achivement_count += 1;
		}

		void print_achievement() {
			System.out.printf("%s 업적 현황 : %d / 5\n", achievement_name, achivement_count);
		}

	}

	// 업적 현황 체크를 위한 클래스
	class ClassArray {
		String name;
		String tribe;
		int count;
		int hp;
		int hpMax;
		int mp;
		int mpMax;
		int power;
		int defense;

		public ClassArray(Achievement obj, Monster obj_) {
			this.name = obj.achievement_name;
			this.count = obj.achivement_count;
			this.tribe = obj_.name;
			this.hp = obj_.hp;
			this.hpMax = obj_.hpMax;
			this.mp = obj_.mp;
			this.mpMax = obj_.mpMax;
			this.power = obj_.power;
			this.defense = obj_.defense;

		}

		void setStatus(Tiger obj) {// 생물별로 다른 스탯을 플레이어 전역변수에 저장하는 메서드
//			Player.level = level;
			Player.p = obj;
			Player.tribe = tribe;
			Player.power += power;
			Player.defense += defense;
			Player.hp += hp;
			Player.hpMax += hpMax;
			Player.mp += mp;
			Player.mpMax += mpMax;
//			Player.upgradeS01 = upgradeS01;
		}
	}

	// 지역별 스테이지 몬스터
	class Position_Monster {
		String position_name; // 지역 이름(한강, 북한산국립공원 등)
		Monster stage_1;
		Monster stage_2;
		Monster stage_3;
		Monster stage_4;
		Monster stage_5;

		Position_Monster(String name, Monster a, Monster b, Monster c, Monster d, Monster e) {
			this.position_name = name;
			this.stage_1 = a;
			this.stage_2 = b;
			this.stage_3 = c;
			this.stage_4 = d;
			this.stage_5 = e;
		}
	}

public class EcoPredataor {

	// 게임 메인 메소드
	public static void main(String[] args) { // game start
		Scanner in = new Scanner(System.in);
		Random random = new Random();
		Exploration exploration = new Exploration();
		Shop shop = new Shop();
		// 게임 초기화

		// 캐릭터 생성 및 선택

		// 게임 메뉴 루프
		while (true) {
			System.out.print("1. 탐험, 2. 상점, 3. 가방 4. 스탯, 5.강화, 6. 진화, 0. 게임 종료\n");
			System.out.print("선택 : ");

			int choice = in.nextInt();

			switch (choice) {
			case 1:
				exploration.explore(shop);
				break;

			case 2:
				shop.showAvailableItems();
				System.out.print("구매할 품목 번호를 입력하세요 (0: 뒤로가기): ");
				int itemChoice = in.nextInt();
				if (itemChoice == 0) {
					break;
				}
				shop.purchaseItem(itemChoice);
				break;

			case 3:
				shop.getPlayerInventory().displayInventory();
				break;

			case 4:
				break;

			case 5:
				break;

			case 6:
				break;

			case 0:
				System.out.println("게임 종료");
				System.exit(0);
			default:
				System.out.println("잘못 입력");
				break;
			}
		}
	}
}
